apply plugin: 'com.android.application'

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
def superpowered_sdk_path = properties.getProperty('superpowered.dir')

android {

    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    defaultConfig {

        applicationId = "com.fesskiev.mediacenter"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode = 13
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true

        ndk {
            abiFilters 'x86', 'armeabi-v7a'
        }

        externalNativeBuild {
            cmake {
                arguments '-DANDROID_PLATFORM=android-16', '-DANDROID_TOOLCHAIN=clang', '-DANDROID_ARM_NEON=TRUE', '-DANDROID_STL=gnustl_static', "-DPATH_TO_SUPERPOWERED:STRING=${superpowered_sdk_path}"
                cFlags '-O3', '-fsigned-char'
                cppFlags '-fsigned-char', "-I${superpowered_sdk_path}"
            }
        }

        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }

    dexOptions {
        jumboMode true
    }

    signingConfigs {
        debug {
            storeFile file("debug.keystore")
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            useProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-rules.pro'
        }
        release {
            useProguard false
            shrinkResources false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-rules.pro'
        }
    }

    flavorDimensions "default"

    productFlavors {
        free {
            dimension "default"
            versionName = "1.1.1"
        }

        pro {
            dimension "default"
            versionName = "1.1.1-pro"
        }
    }

    android {
        lintOptions {
            checkReleaseBuilds false
            // Or, if you prefer, you can continue to check for errors in release builds,
            // but continue the build even when errors are found:
            abortOnError false
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['src/main/jni']
        }
    }

    externalNativeBuild {
        cmake {
            path 'src/main/jni/CMakeLists.txt'
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile files('libs/jaudiotagger-2.2.4.jar')
    compile(name: 'FFmpegAndroid', ext: 'aar')
    compile project(':extensions')
    compile project(':common')

    compile "com.android.support:appcompat-v7:$rootProject.supportLibVersion"
    compile "com.android.support:recyclerview-v7:$rootProject.supportLibVersion"
    compile "com.android.support:cardview-v7:$rootProject.supportLibVersion"
    compile "com.android.support:design:$rootProject.supportLibVersion"
    compile "com.android.support:support-v4:$rootProject.supportLibVersion"
    compile "com.android.support:percent:$rootProject.supportLibVersion"

    compile "com.google.firebase:firebase-crash:${firebaseLibVersion}"
    compile "com.google.firebase:firebase-analytics:${firebaseLibVersion}"

    compile "com.google.android.gms:play-services-wearable:$rootProject.playServiceWearable"

    compile group: "commons-io", name: "commons-io", version: "$rootProject.commons"
    compile "com.android.support:multidex:$rootProject.multidex"
    compile "com.github.clans:fab:$rootProject.fab"
    compile "com.github.bumptech.glide:glide:$rootProject.glide"
    compile "com.google.android.exoplayer:exoplayer:$rootProject.exoplayer"
    compile "io.reactivex:rxandroid:$rootProject.rxandroid"
    compile "io.reactivex:rxjava:$rootProject.rxjava"
    compile "com.squareup.okhttp3:okhttp:$rootProject.okhttp"
    compile "com.squareup.retrofit2:retrofit:$rootProject.retrofit"
    compile "com.squareup.retrofit2:converter-gson:$rootProject.gson"
    compile "com.squareup.retrofit2:adapter-rxjava:$rootProject.rxjavaAdapter"
    compile "com.squareup.sqlbrite:sqlbrite:$rootProject.sqlbrite"
    compile "org.greenrobot:eventbus:$rootProject.eventbus"
    compile "com.thoughtbot:expandablecheckrecyclerview:$rootProject.expandablecheckrecyclerview"

    testCompile "junit:junit:$rootProject.junitVersion"

    androidTestCompile "com.android.support.test:runner:$rootProject.runnerVersion"
    androidTestCompile "com.android.support.test:rules:$rootProject.rulesVersion"

    androidTestCompile "com.android.support.test.espresso:espresso-core:$rootProject.espressoVersion"
    androidTestCompile "com.android.support.test.espresso:espresso-contrib:$rootProject.espressoVersion"
    androidTestCompile "com.android.support.test.espresso:espresso-intents:$rootProject.espressoVersion"

    androidTestCompile "com.android.support.test.uiautomator:uiautomator-v18:$rootProject.uiautomator"

}

apply plugin: 'com.google.gms.google-services'

/*
Resolves dependency versions across test and production APKs, specifically, transitive
dependencies. This is required since Espresso internally has a dependency on support-annotations.
*/
configurations.all {
    resolutionStrategy.force "com.android.support:support-annotations:$rootProject.supportLibVersion"
}
